// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  phone      String
  email      String
  adress     String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  // ver os tickets só do user logado
  userId String? @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id])

  // atrelando o nosso costumer aos tickets
  tickets Ticket[]
}

model Ticket {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  status      String
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())

  // atrelando e estabelecendo relações entre costumer e tickets
  customerId String?   @db.ObjectId
  customer   Customer? @relation(fields: [customerId], references: [id])

  // vamos fazer também referências com os users que abrem os tickets
  userId String? @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @@map("accounts")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  // sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  // userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  // @@map("users")
  tickets Ticket[]

  customers Customer[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String
  expires    DateTime
  // @@map("verificationtokens")

  @@unique([identifier, token])
}
